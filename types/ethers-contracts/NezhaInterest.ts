/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface NezhaInterestInterface extends utils.Interface {
  functions: {
    "depositors(uint256)": FunctionFragment;
    "ethBalance(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "token()": FunctionFragment;
    "ydBalance(address)": FunctionFragment;
    "getBalanceETH()": FunctionFragment;
    "depositETH()": FunctionFragment;
    "withdrawETH(uint256)": FunctionFragment;
    "getBalanceYD()": FunctionFragment;
    "depositYD(uint256)": FunctionFragment;
    "withdrawYD(uint256)": FunctionFragment;
    "ownerWithdraw(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "depositors"
      | "ethBalance"
      | "owner"
      | "token"
      | "ydBalance"
      | "getBalanceETH"
      | "depositETH"
      | "withdrawETH"
      | "getBalanceYD"
      | "depositYD"
      | "withdrawYD"
      | "ownerWithdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "depositors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ethBalance", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "ydBalance", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getBalanceETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalanceYD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositYD",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawYD",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerWithdraw",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "depositors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ethBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ydBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBalanceETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalanceYD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositYD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawYD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerWithdraw",
    data: BytesLike
  ): Result;

  events: {};
}

export interface NezhaInterest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NezhaInterestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    depositors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ethBalance(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    ydBalance(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getBalanceETH(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositETH(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawETH(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getBalanceYD(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositYD(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawYD(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ownerWithdraw(
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  depositors(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  ethBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  ydBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  getBalanceETH(overrides?: CallOverrides): Promise<BigNumber>;

  depositETH(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawETH(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getBalanceYD(overrides?: CallOverrides): Promise<BigNumber>;

  depositYD(
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawYD(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ownerWithdraw(
    _to: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    depositors(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    ethBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    ydBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getBalanceETH(overrides?: CallOverrides): Promise<BigNumber>;

    depositETH(overrides?: CallOverrides): Promise<void>;

    withdrawETH(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalanceYD(overrides?: CallOverrides): Promise<BigNumber>;

    depositYD(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawYD(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    ownerWithdraw(_to: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    depositors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ethBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    ydBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getBalanceETH(overrides?: CallOverrides): Promise<BigNumber>;

    depositETH(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawETH(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getBalanceYD(overrides?: CallOverrides): Promise<BigNumber>;

    depositYD(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawYD(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ownerWithdraw(
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    depositors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ethBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ydBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalanceETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositETH(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawETH(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getBalanceYD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositYD(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawYD(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ownerWithdraw(
      _to: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
